# 1
# Апгрейд калькулятора
# Степан использует калькулятор для расчёта суммы и разности чисел, но на
# работе ему требуются не только обычные арифметические действия. Он ничего
# не хочет делать вручную, поэтому решил немного расширить функционал калькулятора.
# Напишите программу, запрашивающую у пользователя число и действие,
# которое нужно сделать с числом: вывести сумму его цифр, максимальную или
# минимальную цифру. Каждое действие оформите в виде отдельной функции, а основную программу зациклите.
# Запрошенные числа должны передаваться в функции суммы, максимума и минимума при помощи аргументов.

# def sum(num):
#    sums = 0
#    while num > 0:
#        nums = num % 10
#        sums += nums
#        num //= 10
#    print('Сумма цифр:', sums)
#
#
# def max(num):
#     maxm = 0
#     while num > 0:
#         nums = num % 10
#         if nums > maxm:
#             maxm = nums
#         num //= 10
#     print('Максимальная цифра:', maxm)
#
#
# def minim(num):
#     minm = num % 10
#     while num > 0:
#         nums = num % 10
#         if nums < minm:
#             minm = nums
#         num //= 10
#     print('Минимальная цифра:', minm)
#
#
# while True:
#     num = int(input('Введите число: '))
#     dev = input('Введите желаемое действие: 1 - сумма, 2 - максимальная цифра, 3 - минимальная цифра: ')
#     if dev == "1":
#         sum(num)
#     elif dev == "2":
#         max(num)
#     elif dev == "3":
#         minim(num)
#     else:
#         print('Введена команда не верна!')


# 2
#  Недоделка
# Вы пришли на работу в компанию по разработке игр, целевая аудитория — дети и их родители. У предыдущего программиста было задание сделать две
# игры в одном приложении, чтобы пользователь мог выбирать одну из них. Однако программист, на место которого вы пришли, перед увольнением не
# успел выполнить эту задачу и оставил только небольшой шаблон проекта. Используя этот шаблон, реализуйте игры «Камень, ножницы, бумага» и «Угадай
# число». Правила игры «Камень, ножницы, бумага»: программа запрашивает у пользователя строку и выводит, победил он или проиграл. Камень бьёт
# ножницы, ножницы режут бумагу, бумага кроет камень. Правила игры «Угадай число»: программа запрашивает у пользователя число
# до тех пор, пока он не отгадает загаданное.

# def rock_paper_scissors(): # Здесь будет игра «Камень, ножницы, бумага»
#     comp = 1
#     rock = int(input('Введите символ: 1 - камень, 2 - ножницы, 3 - бумага: '))
#     if rock == comp:
#         print('Ничья!')
#     elif (rock == 1 and comp == 2) or (rock == 2 and comp == 3) or (rock == 3 and comp == 1):
#         print('Вы выиграли!')
#     elif (rock == 1 and comp == 3) or (rock == 2 and comp == 1) or (rock == 3 and comp == 2):
#         print('Компьютер выиграл!')
#     else:
#         print('Такого варианта нет!')
#
#
# def guess_the_number(): # Здесь будет игра «Угадай число»
#     comp = 54
#     while True:
#         num = int(input('Введите число: '))
#         if num > comp:
#             print('Вы не угадали, загаданное число больше, чем нужно. Попробуйте снова!')
#         elif num < comp:
#             print('Вы не угадали, загаданное число меньше, чем нужно. Попробуйте снова!')
#         else:
#             print('Вы угадали. Возврат в меню')
#             break
#
#
# def mainMenu(): # Здесь главное меню игры
#     while True:
#         users = int(input('Введите номер игры, в которую хотите сыграть: 1 - «Камень, ножницы, бумага», 2 - «Угадай число», 3 - выход: '))
#         if users == 1:
#             rock_paper_scissors()
#         elif users == 2:
#             guess_the_number()
#         elif users == 3:
#             print('Выход')
#             break
#         else:
#             print('Такой игры нет!')
#
#
# mainMenu()

# 3
# Число наоборот
# Пользователь вводит два числа: N и K. Напишите программу, которая заменяет
# каждое число на число, которое получается из исходного записью его цифр в
# обратном порядке, затем складывает их, снова переворачивает и выводит ответ на экран.

# def reversal(x):
#     count = 0
#     revers_x = 0
#     for _ in str(x):
#         count += 1
#     while x > 0:
#         count -= 1
#         revers_x += (x % 10) * (10 ** count)
#         x //= 10
#     return revers_x
#

# num1 = int(input('Введите первое число: '))
# num2 = int(input('Введите второе число: '))
#
# revers_num1 = reversal(num1)
# revers_num2 = reversal(num2)
#
# print('\nПервое число наоборот:', revers_num1)
# print('\nВторое число наоборот:', revers_num2)
#
# summ = revers_num1 + revers_num2
# revers_sum = reversal(summ)
#
#
# print('\nСумма:', summ)
# print('Сумма наоборот:', revers_sum)

# 4
# Функция максимума
# Юра пишет различные полезные функции для Python, чтобы остальным
# программистам стало проще работать. Он захотел написать функцию, которая
# будет находить максимум из перечисленных чисел. Функция для нахождения
# максимума из двух чисел у него уже есть. Юра задумался: может быть, её
# можно как-то использовать для нахождения максимума уже от трёх чисел?
# Помогите Юре написать программу, которая находит максимум из трёх чисел.
# Для этого используйте только функцию нахождения максимума из двух чисел.

# def max_of_2(num1, num2):
#     if num1 > num2:
#         return num1
#     else:
#         return num2
#
#
# def max_of_3(num1, num2, num3):
#     return max_of_2(max_of_2(num1, num2), num3)
#
#
# numer1 = int(input('Введите первое число:'))
# numer2 = int(input('Введите второе число:'))
# numer3 = int(input('Введите третье число:'))
#
# print('Максимальное число:', max_of_3(numer1, numer2, numer3))

# 5
# Яйца
# В рамках программы колонизации Марса компания «Спейс Инжиниринг»
# вывела особую породу черепах, которые, по задумке, должны размножаться,
# откладывая яйца в марсианском грунте. Откладывать яйца слишком близко к
# поверхности опасно из-за радиации, а слишком глубоко — из-за давления
# грунта и недостатка кислорода. Вообще, факторов очень много, но
# специалисты проделали большую работу и предположили, что уровень
# опасности для черепашьих яиц рассчитывается по формуле: D = x^3 − 3x^2 −
# 12x + 10, где x — глубина кладки в метрах, а D — уровень опасности в
# условных единицах. Для тестирования гипотезы нужно взять пробу грунта на
# безопасной, согласно формуле, глубине.
# Напишите программу, находящую такое значение глубины х, при котором
# уровень опасности как можно более близок к нулю. На вход программе
# подаётся максимально допустимое отклонение уровня опасности от нуля, а
# программа должна рассчитать приблизительное значение х, удовлетворяющее
# этому отклонению. Известно, что глубина точно больше нуля и меньше четырёх
# метров. Обеспечьте контроль ввода.

def calculate_danger(x):
    return x ** 3 - 3 * x ** 2 - 12 * x + 10


def find_safe_depth(max_danger):
    d_min = 0
    d_max = 4
    d_middle = (d_min + d_max) / 2
    middle_danger = calculate_danger(d_middle)

    while abs(middle_danger) > max_danger:
        if middle_danger > 0:
            d_min = d_middle
        else:
            d_max = d_middle
        d_middle = (d_min + d_max) / 2
        middle_danger = calculate_danger(d_middle)
    return d_middle


def main():
    max_danger = float(input('Введите допустимый уровень опасности:'))
    if max_danger < 0:
        print('Вы ввели недопустимое значение! Попробуйте еще раз.')
    else:
        safe_depth = find_safe_depth(max_danger)
    print(f'Приблизительная глубина безопасной кладки:{safe_depth:.9f} м')


main()
